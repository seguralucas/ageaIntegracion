package exit.services.fileHandler;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import org.json.simple.JSONArray;

import com.csvreader.CsvWriter;

import exit.services.json.JSONHandler;
import exit.services.json.JsonRestIncidentes;
import exit.services.parser.ParserXMLWSConnector;
import exit.services.principal.Separadores;

public class CSVHandler {
	
	public static String cabeceraFichero;
	public static final String PATH_ERROR_SERVER_NO_ALCANZADO="servidor_no_alcanzado.csv";
	public static final String PATH_SAC_EXISTENTE="sac_existente_services.csv";
	public static final String LOG_ERROR_FETCH_TIPO_INCIDENTE="error_fetch_tipo_incidente.txt";
	public static final String PATH_ERROR_EXCEPTION="exception_ejecucion.csv";
	public static final String PATH_ID_NO_ENCONTRADO="id_no_encontrado.csv";
	public static final String PATH_ERROR_EXCEPTION_LOG="exception_ejecucion_log.txt";
	public static final String NRO_SAC_REPETIDO_EN_EL_CSV_EJECUTADO="nro_sac_repetido_en_el_csv_ejecutado.csv";
	
		public synchronized void crearCabecer(File file)  throws IOException{
		 	CsvWriter csvOutput = new CsvWriter(new FileWriter(file, true), ParserXMLWSConnector.getInstance().getSeparadorCSV().charAt(0));
	        if(!file.exists() || file.length() == 0){
					csvOutput.write(cabeceraFichero);
		        	csvOutput.endRecord();
			}
		}	
		public synchronized void crearCabecer(File file,String cabecera)  throws IOException{
		 	CsvWriter csvOutput = new CsvWriter(new FileWriter(file, true), ParserXMLWSConnector.getInstance().getSeparadorCSV().charAt(0));
            if(!file.exists() || file.length() == 0){
    				csvOutput.write(cabecera);
    	        	csvOutput.endRecord();
    		}
		}		
		 public void escribirCSV(File file,String line, boolean tieneCabecera) throws IOException{
			 	CsvWriter csvOutput = new CsvWriter(new FileWriter(file, true), ParserXMLWSConnector.getInstance().getSeparadorCSV().charAt(0));
	            String[] campos= line.split(ParserXMLWSConnector.getInstance().getSeparadorCSVREGEX());
	            for(String c:campos){
	                csvOutput.write(c);        
	            }
            	csvOutput.endRecord();		 
	            csvOutput.close();
		 }
		 
		 public void escribirCSV(File file,String line) throws IOException{
			 escribirCSV(file,line,true);
		 }
		 
		 public void escribirCSV(String path,String line) throws IOException{
			 	escribirCSV(DirectorioManager.getDirectorioFechaYHoraInicio(path),line);
		 }
		 public void escribirCSV(String path,String line,boolean hasCabecera) throws IOException{
			 	escribirCSV(DirectorioManager.getDirectorioFechaYHoraInicio(path),line,hasCabecera);
		 }
		 public void escribirCSV(String path,JSONHandler json) throws IOException{
			 escribirCSV(DirectorioManager.getDirectorioFechaYHoraInicio(path),json.getLine(),true);
		 }
		/* public void escribirCSV(File file,JSONHandler json,boolean hasCabecera) throws IOException{
				 	CsvWriter csvOutput = new CsvWriter(new FileWriter(file, true), ParserXMLWSConnector.getInstance().getSeparadorCSV().charAt(0));
		            if(!file.exists() || file.length() == 0){
		            	if(hasCabecera)
		            		crearCabecer(csvOutput);
		            }
					String[] campos= json.getLine().split(ParserXMLWSConnector.getInstance().getSeparadorCSVREGEX());
					for(int i=0;i<campos.length;i++)
						csvOutput.write(campos[i]);
	            	csvOutput.endRecord();
		            csvOutput.close();	      
		 }*/
		 

		 private void insertarCampoVacio(CsvWriter csvOutput) throws IOException{
        	 csvOutput.write(insertarNoNull(""));
		 }
		 
						
			 public void escribirCSVERRORLongitud(String path,String line) throws IOException{
				 	CsvWriter csvOutput = new CsvWriter(new FileWriter(DirectorioManager.getDirectorioFechaYHoraInicio(path), true), ParserXMLWSConnector.getInstance().getSeparadorCSV().charAt(0));
		            File aux = DirectorioManager.getDirectorioFechaYHoraInicio(path);
		            if(!aux.exists() || aux.length() == 0){
		            	String[] cabeceraArray = cabeceraFichero.split(ParserXMLWSConnector.getInstance().getSeparadorCSVREGEX());
		            	for(int i=0;i<cabeceraArray.length;i++)
		            		csvOutput.write(cabeceraArray[i]);
		            	csvOutput.endRecord();		 
		            }
		            else
		            	csvOutput.endRecord();		 
		            String[] campos= line.split(ParserXMLWSConnector.getInstance().getSeparadorCSVREGEX());
		            for(String c:campos){
		                csvOutput.write(c);        
		            }
		            csvOutput.close();
				 
			 }
			 
		 private String insertarNoNull(String cadena){
			 if(cadena!=null)
				 return cadena;
			 return "";
		 }
		 
		 
		 public synchronized void escribirErrorException(StackTraceElement[] stackArray) {
			 escribirErrorException(null,stackArray);
		 }
		 public synchronized void escribirErrorException(JSONHandler json,StackTraceElement[] stackArray) {
			  	File fichero = new File(ParserXMLWSConnector.getInstance().getFicheroError()); 
			     PrintWriter out;
					try {
						if(json!=null){
							this.escribirCSV(PATH_ERROR_EXCEPTION,json.getLine());
							this.escribirCSV(PATH_ERROR_EXCEPTION_LOG,json.getLine());
						}
						for(StackTraceElement ste: stackArray){
						     this.escribirCSV(PATH_ERROR_EXCEPTION_LOG,"FileName: "+ste.getFileName()+" Metodo: "+ste.getMethodName()+"Clase "+ste.getClassName()+" Linea "+ste.getLineNumber(),false);
						}		
						this.escribirCSV(PATH_ERROR_EXCEPTION_LOG,Separadores.SEPARADOR_ERROR_TRYCATCH);
						} catch (IOException e) {
						e.printStackTrace();
					}
		 }
		
}
